class Solution {
    public int search(int[] nums, int target) {
        int n=nums.length;
        int low=0;
        int high=n-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                return mid;
            }
            if(nums[low]<=nums[mid]){
                if(nums[low]<=target && nums[mid]>=target){
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            }
            else{
                if(nums[mid]<=target && nums[high]>=target){
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
        }
        return -1;
    }
}



/*

The given array is sorted but rotated, meaning it has two sorted halves.

We use binary search to efficiently find the target instead of checking each element one by one.

Start with low = 0 and high = n - 1. Calculate mid as (low + high) / 2.

If nums[mid] == target, return mid. Otherwise, check which half is sorted.

If the left half (nums[low] to nums[mid]) is sorted, check if the target lies in this half. If yes, move high to mid - 1, else move low to mid + 1.

Otherwise, the right half is sorted, so check if the target lies here. If yes, move low to mid + 1, else move high to mid - 1.

If the loop ends without finding the target, return -1. ðŸš€

*/
