class Solution{
    Node removeDuplicates(Node head){
        Node temp = head;
        
        while(temp!=null && temp.next!=null){
            Node nextnode = temp.next;
            while(nextnode!=null && nextnode.data==temp.data){
                nextnode=nextnode.next;
            }
            temp.next=nextnode;
            if(nextnode!=null){
                nextnode.prev=temp;
                temp=temp.next;
            }
        }
        return head;
    }
}

/*

Start with the head node: We begin at the first node in the list and check for duplicates as we move forward.

Compare current node with the next node: If the current node’s data is the same as the next node's data, we have a duplicate.

Skip the duplicate: We remove the duplicate node by linking the current node’s next pointer to the node after the duplicate.

Update pointers: If we skip a duplicate, we also need to update the prev pointer of the next node to point back to the current node.

Move to the next node: We continue the process until we reach the end of the list.

Return the updated list: After all duplicates are removed, we return the modified list.

*/
