/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        // Base case: empty or single node is already sorted
        if (head == null || head.next == null) {
            return head;
        }

        // Step 1: Split the list into two halves
        ListNode mid = getMiddle(head);
        ListNode rightHead = mid.next;
        mid.next = null; // Break the list

        // Step 2: Recursively sort both halves
        ListNode left = sortList(head);
        ListNode right = sortList(rightHead);

        // Step 3: Merge the sorted halves
        return merge(left, right);
    }

    // Helper function to find the middle node of the list
    private ListNode getMiddle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head.next;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;
    }

    // Helper function to merge two sorted lists (in-place)
    private ListNode merge(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(-1);
        ListNode tail = dummy;

        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                tail.next = list1;
                list1 = list1.next;
            } else {
                tail.next = list2;
                list2 = list2.next;
            }
            tail = tail.next;
        }

        if (list1 != null) tail.next = list1;
        else tail.next = list2;

        return dummy.next;
    }
}


/*

âœ… Step-by-Step Approach:
Understand the nature of merge sort:

Merge sort is a divide and conquer algorithm.
We split the list into two halves recursively until each part has only one node.
Then we merge these halves in sorted order.

Create a function to find the middle of the linked list:
Use two pointers: slow and fast.
Move slow one step at a time, and fast two steps.
When fast reaches the end, slow will be at the middle.
We use this middle node to divide the list into two halves.

Recursively sort both halves of the list:
Once we split the list into two parts using the middle node,
Call the same sorting function on both the left half and right half.

Merge two sorted linked lists:
Use a dummy node and a temporary pointer.
Compare the values of the current nodes of both lists.
Append the smaller one to the result and move ahead.
Repeat this process until both lists are completely merged.

No extra memory is used for storing values:
The nodes are directly rearranged using their next pointers.
No arrays, no lists, and no copying of values is done.
Only the call stack uses memory for recursion (O(log n) space).

Finally, return the merged and sorted linked list.

*/
