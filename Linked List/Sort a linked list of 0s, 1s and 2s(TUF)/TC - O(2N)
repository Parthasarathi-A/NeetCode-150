/*
class Node
{
    int data;
    Node next;
    Node(int data)
    {
        this.data = data;
        next = null;
    }
}
*/
class Solution {
    // Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head) {
        while(head==null || head.next==null){
            return head;
        }
        
        int c0=0, c1=0, c2=0;
        
        Node temp=head;
        
        while(temp != null){
            if(temp.data==0){
                c0++;
            }
            else if(temp.data==1){
                c1++;
            }
            else{
                c2++;
            }
            temp=temp.next;
        }
        
       temp=head;
        
        while(temp != null){
            if(c0>0){
                temp.data=0;
                c0--;
            }
            else if(c1>0){
                temp.data=1;
                c1--;
            }
            else{
                temp.data=2;
                c2--;
            }
            temp=temp.next;
        }
        return head;
    }
}


/*
Count the numbers – Go through the linked list once and count how many 0s, 1s, and 2s are present.

Modify the list – Traverse the linked list again, replacing the first c0 nodes with 0, the next c1 nodes with 1, and the last c2 nodes with 2.

No extra space needed – We just update the values in the existing linked list instead of creating a new one.

Time efficiency – We traverse the list twice, making it an O(N) solution.

Space efficiency – Only three integer counters (c0, c1, c2) are used, making it an O(1) space solution.

Final result – The linked list is now sorted in-place without changing the structure.

*/
