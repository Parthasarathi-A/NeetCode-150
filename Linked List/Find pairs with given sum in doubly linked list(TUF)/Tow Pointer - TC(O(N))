class Solution {
    public ArrayList<ArrayList<Integer>> findPairsWithGivenSum(int target, Node head) {
        
        Node start = head;
        Node end = tail(head);
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        
        while (start != end && start.prev != end) {
            int sum = start.data + end.data;
            if (sum == target) {
                ArrayList<Integer> pair = new ArrayList<>();
                pair.add(start.data);
                pair.add(end.data);
                res.add(pair);
                start = start.next;
                end = end.prev;
            } else if (sum < target) {
                start = start.next;
            } else {
                end = end.prev;
            }
        }
        return res;
    }
    
    private Node tail(Node head) {
        Node tail = head;
        while (tail.next != null) {
            tail = tail.next;
        }
        return tail;
    }
}


/*

Initialize Pointers: Set two pointers, start at the head and end at the tail of the list. The end pointer is found by traversing to the last node using the tail method.

Create Result List: Initialize a list res to store pairs of nodes that sum to the target value.

Traverse the List: Use a while loop to iterate through the list until start meets end.

Check Sum: For each pair of nodes pointed to by start and end, check if their sum equals the target.

Add Pair to Result: If the sum matches the target, create a pair list, add the node values, and append this pair to res.

Adjust Pointers: If the sum is less than the target, move the start pointer forward. If the sum is greater than the target, move the end pointer backward.

Move Forward: After finding a pair, move both start and end pointers inward to find other pairs.

Repeat Process: Continue this process until the start pointer meets or crosses the end pointer.

Return Result: Return the list of pairs that sum up to the target value.

Helper Method: Use the tail method to find the last node in the list by traversing from the head.

*/
