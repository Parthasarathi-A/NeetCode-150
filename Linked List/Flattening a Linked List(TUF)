public class FlattenLinkedList {

    public static Node flattenLinkedList(Node head) {
        
        if (head == null || head.next == null) {
            return head;
        }
        // Recursively flatten the
        // rest of the linked list
        Node mergedHead = flattenLinkedList(head.next);
        head = merge(head, mergedHead);
        return head;
    }

    // Merges two linked lists in a particular
    // order based on the data value
    public static Node merge(Node list1, Node list2) {
        Node dummyNode = new Node(-1);
        Node res = dummyNode;

        // Merge the lists based on data values
        while (list1 != null && list2 != null) {
            if (list1.data < list2.data) {
                res.child = list1;
                res = list1;
                list1 = list1.child;
            } else {
                res.child = list2;
                res = list2;
                list2 = list2.child;
            }
            res.next = null;
        }

        // Connect the remaining
        // elements if any
        if (list1 != null) {
            res.child = list1;
        } else {
            res.child = list2;
        }

        // Break the last node's
        // link to prevent cycles
        //we can go without this part also
        
        /*
        if (dummyNode.child != null) {
            dummyNode.child.next = null;
        }
        */

        return dummyNode.child;
    }
    
}


/*

Explanation: https://takeuforward.org/data-structure/flattening-a-linked-list/

*/
