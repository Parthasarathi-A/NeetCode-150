class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        for (String token : tokens) {
            if (isOperator(token)) {
                int b = stack.pop();
                int a = stack.pop();
                int result = applyOperator(token, a, b);
                stack.push(result);
            } else {
                stack.push(Integer.parseInt(token));
            }
        }
        return stack.pop(); 
    }

    private boolean isOperator(String token) {
        return token.equals("+") || token.equals("-") || token.equals("*") || token.equals("/");
    }

    private int applyOperator(String token, int a, int b) {
        if (token.equals("+")) {
            return a + b;
        } else if (token.equals("-")) {
            return a - b;
        } else if (token.equals("*")) {
            return a * b;
        } else { // token.equals("/")
            return a / b;
        }
    }
}





/*

1️⃣ Create a stack to store numbers while processing the tokens.

2️⃣ Iterate through each token in the given array:

If the token is a number, push it onto the stack.
If the token is an operator (+, -, *, /), pop the top two numbers from the stack, apply the operation, and push the result back.
3️⃣ Define a helper function isOperator() to check if a token is an operator.

4️⃣ Define applyOperator() to perform the required arithmetic operation based on the operator.

5️⃣ After processing all tokens, the final result will be the only element left in the stack, so return stack.pop().

6️⃣ This approach ensures O(n) time complexity, as each token is processed once.

*/
