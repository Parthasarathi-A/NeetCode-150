class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        int n = temperatures.length;
        int answer[]=new int[n];
        Stack<Integer> stack=new Stack<>();
        for(int i=0;i<n;i++){
            while(!stack.isEmpty() && temperatures[i]>temperatures[stack.peek()]){
                int index=stack.pop();
                answer[index]=i-index;
            }
            stack.push(i);
        }
        return answer;
    }
}



/*

1️⃣ Understanding the Problem:

Given an array temperatures, we need to find how many days we have to wait until a warmer temperature appears.
If no warmer temperature is found, return 0 for that day.
Example:
Input: [73, 74, 75, 71, 69, 72, 76, 73]
Output: [1, 1, 4, 2, 1, 1, 0, 0]
2️⃣ Using a Monotonic Stack (Decreasing Order):

A stack is used to store indices of temperatures in decreasing order.
We process each temperature from left to right:
If the current temperature is higher than the temperature at the top of the stack,
We pop the stack, calculate the number of days waited, and store the result.
Push the current index onto the stack.
3️⃣ Implementation Steps:

Initialize answer[] of size n to store the result.
Create a stack to store indices of elements (not values).
Iterate over the array:
While the stack is not empty and current temperature is greater than stack.peek():
Pop the index from the stack.
Calculate answer[index] = i - index (days until warmer temp).
Push the current index onto the stack.
Return the final answer[] array.

*/
