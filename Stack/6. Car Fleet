
public class Solution {
    public int carFleet(int target, int[] position, int[] speed) {
        int n = position.length;
        double[][] cars = new double[n][2];
        
        for (int i = 0; i < n; i++) {
            cars[i][0] = position[i];
            cars[i][1] = (double)(target - position[i]) / speed[i];
        }
        
        Arrays.sort(cars, (a, b) -> Double.compare(b[0], a[0]));
        
        int count = 0;
        double prevTime = 0;
        for (double[] car : cars) {
            if (car[1] > prevTime) {
                count++;
                prevTime = car[1];
            }
        }
        
        return count;
    }
}


/*

ðŸ”¹ Understanding the Problem Statement
We are given N cars, each starting at a different position along a road.
Each car has a specific speed, and all cars move toward a target distance.

ðŸ‘‰ A car fleet is a group of cars that move together at the same speed.
ðŸ‘‰ A car cannot overtake another car but can catch up and form a fleet.
ðŸ‘‰ We need to count the number of fleets that will reach the target.

ðŸ”¹ Step-by-Step Thought Process to Solve the Problem

Step 1: Store the Car Information
Since each car has both a position and a speed, we store them in a 2D array.
We also calculate the time each car takes to reach the target using:

time = target âˆ’ position/speed

 
The array structure will look like:

[position, time]

Step 2: Sort Cars by Position in Descending Order
We sort cars based on their position (furthest car first).
This ensures we process the cars from right to left on the road.

Sort Cars by Position (Descending Order)

Sort the array based on position so that we process rightmost cars first.


Step 3: Count Fleets Using a Stack-Like Approach

Iterate through sorted cars:
If a car takes more time than the last recorded fleet time â†’ New fleet is formed.
If a car takes less or equal time, it joins the previous fleet.
Keep track of the previous fleetâ€™s time-to-target.

Step 4: Return the Fleet Count

The total number of fleets formed is the final answer.

*/
